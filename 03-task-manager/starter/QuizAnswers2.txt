1. In this lesson, you created a middleware function called asyncWrapper. Why?
To make code cleaner and read out try catch combination

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. 
Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const {CustomAPIError} = require('./errors/custom-error');=

 getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(CustomAPIError('Something went wrong',404))
  }
  res.status(200).json({ task });
});

As you will see in the lessons that follow, you do not have to always create the asyncWrapper middleware, 
because you can instead use an NPM package called express-async-errors that provides the same capability.